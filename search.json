[{"path":"https://hauselin.github.io/chatlogr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 chatlogr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hauselin.github.io/chatlogr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hause Lin. Author, maintainer, copyright holder.","code":""},{"path":"https://hauselin.github.io/chatlogr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lin H (2024). chatlogr: Chat Log Parser. R package version 0.0.0.9000, https://hauselin.github.io/chatlogr/, https://github.com/hauselin/chatlogr.","code":"@Manual{,   title = {chatlogr: Chat Log Parser},   author = {Hause Lin},   year = {2024},   note = {R package version 0.0.0.9000, https://hauselin.github.io/chatlogr/},   url = {https://github.com/hauselin/chatlogr}, }"},{"path":"https://hauselin.github.io/chatlogr/index.html","id":"chatlogr","dir":"","previous_headings":"","what":"Chat Log Parser","title":"Chat Log Parser","text":"chatlogr helps parse data chatbot data. main function parse_users_chat_data() parses chat history data CSV file. See https://hauselin.github.io/chatlogr details.","code":""},{"path":"https://hauselin.github.io/chatlogr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Chat Log Parser","text":"Install development version chatlogr. might need install remotes package first.","code":"install.packages(\"remotes\")  # if remotes package not already installed remotes::install_github(\"hauselin/chatlogr\")"},{"path":"https://hauselin.github.io/chatlogr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Chat Log Parser","text":"","code":"# datafile is \"data.csv\" # unique id column is ResponseId # chat history columns contain \"chathistory\" # parse 10 (random) rows chatdata <- parse_users_chat_data(     \"data.csv\",      idcol = \"ResponseId\",      chat_col_patterns = c(\"chathistory\"),      nrows = 10     ) # Sampling 10 rows...                                                                       # Processing 10 rows... # Parsing summary/status #    total  success   errors warnings  #       10        7        3        0   # get successfully parsed userids get_success_ids(chatdata)  # get failed userids get_failed_ids(chatdata)  # get chat history for a specific user get_user_chat(chatdata, \"R_7PQRDkwCKlhLGhP\") # prints chat history for user with id \"R_7PQRDkwCKlhLGhP\" # returns a tibble dataframe for this user"},{"path":"https://hauselin.github.io/chatlogr/index.html","id":"parse-with-parse_users_chat_data","dir":"","previous_headings":"","what":"Parse with parse_users_chat_data()","title":"Chat Log Parser","text":"Parse raw CSV file downloaded Qualtrics parse_users_chat_data() function.","code":"csv_file <- \"qualtrics_data.csv\" # see doc for default parameter values chatdata <- parse_users_chat_data(csv_file)  # returns a list # Processing 150 rows...                                                                    # Parsing summary/status #    total  success   errors warnings  #      150      122       28        0   names(chatdata) # keys in the list # [1] \"info\"       \"info_df\"    \"json_list\"  \"df_success\" \"df_fail\"     # summary of parsing results chatdata$info # total  success   errors warnings  #   150      122       28        0   chatdata$info_df # tibble dataframe with status column indicating parsing success or failure # mobile column indicates mobile (1) or not () # A tibble: 150 × 3 #   ResponseId                     status                       mobile #   <chr>                          <chr>                         <dbl> # 1 \"Response ID\"                  error: json validation error      0 # 2 \"{\\\"ImportId\\\":\\\"_recordId\\\"}\" error: json validation error      0 # ...  # large list object containing parsed JSON data chatdata$json_list    # tibble dataframe with successfully parsed chat history chatdata$df_success   # A tibble: 1,103 × 6 #    ResponseId        role      content                            createdAt    id n_words #    <chr>             <chr>     <chr>                                  <dbl> <int>   <int> #  1 R_6CTNF27UPvt8oKX system    \"You are an engaging and persuasi…      0        0     344 #  2 R_6CTNF27UPvt8oKX user      \"The issue of 'Role of federal go…      0.1      1      95 #  3 R_6CTNF27UPvt8oKX assistant \"It’s great that you’re thinking …      1.99     2     477 #  4 R_6CTNF27UPvt8oKX user      \"thank you for explaining\"             42.9      3       4  # tibble dataframe with failed parsing chatdata$df_fail  # # A tibble: 28 × 6 #    ResponseId                     role  content                   createdAt    id n_words #    <chr>                          <chr> <chr>                         <dbl> <int>   <int> #  1 \"Response ID\"                  NA    \"Chat history will be sa…        NA    NA     315 #  2 \"{\\\"ImportId\\\":\\\"_recordId\\\"}\" NA    \"{\\\"ImportId\\\":\\\"QID84_T…        NA    NA      10 #  3 \"R_6Oxfp8hPdB4oOJQ\"            NA    \"\"                               NA    NA       0"},{"path":"https://hauselin.github.io/chatlogr/index.html","id":"parsing-parameters","dir":"","previous_headings":"Parse with parse_users_chat_data()","what":"Parsing parameters","title":"Chat Log Parser","text":"parse_users_chat_data() function several parameters can adjusted suit specific format chat data.","code":"parse_users_chat_data(     csv_file,  # path to CSV file     idcol = \"your_unique_ID_column\",      chat_col_patterns = c(\"chathistory\"), # get columns with names containing this pattern     chat_cols = c(\"chathistory00\", \"chathistory01\"),  # specify exact column names to parse     nrows = 10  # no. of rows to read (for debugging) )"},{"path":"https://hauselin.github.io/chatlogr/index.html","id":"saving-data","dir":"","previous_headings":"","what":"Saving data","title":"Chat Log Parser","text":"","code":"# save the full chatdata object to a JSON file # chatdata is the list object returned by parse_users_chat_data() # save the FULL chatdata object to a JSON file write_to_json(chatdata, \"chatdata.json\")  # save the successfully parsed chat history to a CSV file # chatdata is the list object returned by parse_users_chat_data() # saves only the chat history data to a CSV file write_to_csv(chatdata, \"chathistory.csv\")"},{"path":"https://hauselin.github.io/chatlogr/reference/get_failed_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ids whose data have failed to parse — get_failed_ids","title":"Get ids whose data have failed to parse — get_failed_ids","text":"Get ids whose data failed parse","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_failed_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ids whose data have failed to parse — get_failed_ids","text":"","code":"get_failed_ids(chatdata)"},{"path":"https://hauselin.github.io/chatlogr/reference/get_failed_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ids whose data have failed to parse — get_failed_ids","text":"chatdata Chat data parse_users_chat_data.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_failed_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ids whose data have failed to parse — get_failed_ids","text":"vector user ids.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_failed_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ids whose data have failed to parse — get_failed_ids","text":"","code":"csv_file <- file.path(system.file(\"extdata\", package = \"chatlogr\"), \"mtcars.csv\") chatdata <- parse_users_chat_data(csv_file, \"user_id\", nrows = 5) #> Sampling 5 rows... #> Processing 5 rows... #> Parsing summary/status #>    total  success   errors warnings  #>        5        0       23        0  get_failed_ids(chatdata) #> [1]  5  6 12 13 23"},{"path":"https://hauselin.github.io/chatlogr/reference/get_success_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ids whose data have been parsed sucessfully — get_success_ids","title":"Get ids whose data have been parsed sucessfully — get_success_ids","text":"Get ids whose data parsed sucessfully","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_success_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ids whose data have been parsed sucessfully — get_success_ids","text":"","code":"get_success_ids(chatdata)"},{"path":"https://hauselin.github.io/chatlogr/reference/get_success_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ids whose data have been parsed sucessfully — get_success_ids","text":"chatdata Chat data parse_users_chat_data.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_success_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ids whose data have been parsed sucessfully — get_success_ids","text":"vector user ids.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_success_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ids whose data have been parsed sucessfully — get_success_ids","text":"","code":"csv_file <- file.path(system.file(\"extdata\", package = \"chatlogr\"), \"mtcars.csv\") chatdata <- parse_users_chat_data(csv_file, \"user_id\") #> Processing 32 rows... #> Parsing summary/status #>    total  success   errors warnings  #>       32        0       32        0  get_success_ids(chatdata) #> numeric(0)"},{"path":"https://hauselin.github.io/chatlogr/reference/get_user_chat.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and view chat history of a user — get_user_chat","title":"Get and view chat history of a user — get_user_chat","text":"Get view chat history user","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_user_chat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and view chat history of a user — get_user_chat","text":"","code":"get_user_chat(chatdata, user_id = NULL, random_user = FALSE)"},{"path":"https://hauselin.github.io/chatlogr/reference/get_user_chat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and view chat history of a user — get_user_chat","text":"chatdata Chat data parse_users_chat_data. user_id user ID character. Default NULL. random_user logical value. TRUE, random user selected. Default FALSE.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_user_chat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and view chat history of a user — get_user_chat","text":"Chat history user tibble.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/get_user_chat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and view chat history of a user — get_user_chat","text":"","code":"csv_file <- file.path(system.file(\"extdata\", package = \"chatlogr\"), \"mtcars.csv\") chatdata <- parse_users_chat_data(csv_file, \"user_id\") #> Processing 32 rows... #> Parsing summary/status #>    total  success   errors warnings  #>       32        0       32        0  get_user_chat(chatdata, user_id = 1) #> Chat history for user 1 #> -------------------- #> NA (1 words): ab #>  #> -------------------- #> # A tibble: 1 × 6 #>   user_id role  content createdAt id    n_words #>     <dbl> <lgl> <chr>   <lgl>     <lgl>   <int> #> 1       1 NA    ab      NA        NA          1"},{"path":"https://hauselin.github.io/chatlogr/reference/parse_user_chat_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a single user's raw chat data — parse_user_chat_data","title":"Parse a single user's raw chat data — parse_user_chat_data","text":"Parse single user's raw chat data","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/parse_user_chat_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a single user's raw chat data — parse_user_chat_data","text":"","code":"parse_user_chat_data(   user_chat_data,   user_id,   join_str = \"\\\"\\\"\",   verbose = TRUE )"},{"path":"https://hauselin.github.io/chatlogr/reference/parse_user_chat_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a single user's raw chat data — parse_user_chat_data","text":"user_chat_data Raw chat data single user. Must include chat data columns. user_id User ID character. join_str Join string character. Defaults '\\\"\\\"'. verbose Logical. Defaults TRUE.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/parse_user_chat_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a single user's raw chat data — parse_user_chat_data","text":"JSON data list.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/parse_user_chat_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a single user's raw chat data — parse_user_chat_data","text":"","code":"csv_file <- file.path(system.file(\"extdata\", package = \"chatlogr\"), \"mtcars.csv\") user_chat_data <- read_relevant_data_columns(csv_file, \"user_id\", \"chathistory\")[1, ] user_chatdata <- parse_user_chat_data(user_chat_data, \"vs\", join_str = '\\\"\\\"') #> vs has 3 cells #> - status: error: json validation error"},{"path":"https://hauselin.github.io/chatlogr/reference/parse_users_chat_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse all user data — parse_users_chat_data","title":"Parse all user data — parse_users_chat_data","text":"Parse user data","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/parse_users_chat_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse all user data — parse_users_chat_data","text":"","code":"parse_users_chat_data(   csv_file,   idcol = \"ResponseId\",   chat_col_patterns = c(\"chathistory\"),   chat_cols = \"\",   join_str = \"\\\"\\\"\",   nrows = Inf,   verbose = FALSE )"},{"path":"https://hauselin.github.io/chatlogr/reference/parse_users_chat_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse all user data — parse_users_chat_data","text":"csv_file Path csv file character. idcol Name column user ID column character. Must contain unique values. chat_col_patterns Patterns match chat columns character. Defaults \"chathistory\". chat_cols Chat columns character. Defaults \"\". join_str Join string character. Defaults '\\\"\\\"'. nrows Number rows process. Defaults Inf. Use fewer rows debug function/parser. verbose Whether print processing status. Defaults FALSE.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/parse_users_chat_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse all user data — parse_users_chat_data","text":"list following keys: info vector indicating total number rows processed, number success/error/warning parses. info_df dataframe/tibble info user's chat data, status column indicates parsing status mobile column indicates mobile (1) (0). json_list list JSON data user. Contains full data can large list. df_success dataframe/tibble successful parses. Contains chat messages data. df_fail dataframe/tibble failed parses. Contains chat messages data.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/parse_users_chat_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse all user data — parse_users_chat_data","text":"","code":"csv_file <- file.path(system.file(\"extdata\", package = \"chatlogr\"), \"mtcars.csv\") chatdata <- parse_users_chat_data(csv_file, \"user_id\") #> Processing 32 rows... #> Parsing summary/status #>    total  success   errors warnings  #>       32        0       32        0"},{"path":"https://hauselin.github.io/chatlogr/reference/read_relevant_data_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Read csv file to get matching data columns — read_relevant_data_columns","title":"Read csv file to get matching data columns — read_relevant_data_columns","text":"Read csv file get matching data columns","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/read_relevant_data_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read csv file to get matching data columns — read_relevant_data_columns","text":"","code":"read_relevant_data_columns(   csv_file,   idcol,   chat_col_patterns = c(\"chathistory\"),   chat_cols = \"\" )"},{"path":"https://hauselin.github.io/chatlogr/reference/read_relevant_data_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read csv file to get matching data columns — read_relevant_data_columns","text":"csv_file Path csv file character. idcol ID column character. chat_col_patterns Patterns match chat columns character. Defaults \"chathistory\". chat_cols Chat columns character. Defaults \"\".","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/read_relevant_data_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read csv file to get matching data columns — read_relevant_data_columns","text":"Dataframe/tibble matching columns.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/read_relevant_data_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read csv file to get matching data columns — read_relevant_data_columns","text":"","code":"csv_file <- file.path(system.file(\"extdata\", package = \"chatlogr\"), \"mtcars.csv\") dat <- read_relevant_data_columns(csv_file, \"vs\", \"mpg\", \"cyl\")"},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write chat history to csv file — write_to_csv","title":"Write chat history to csv file — write_to_csv","text":"Write chat history csv file. include information contained full chat data. save full chat data, use `write_to_json()`.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write chat history to csv file — write_to_csv","text":"","code":"write_to_csv(chatdata, output_file)"},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write chat history to csv file — write_to_csv","text":"chatdata Chat data parse_users_chat_data. output_file Output file name. Must end '.csv'.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write chat history to csv file — write_to_csv","text":"TRUE successful.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write chat history to csv file — write_to_csv","text":"","code":"if (FALSE) { # \\dontrun{ write_to_csv(chatdata, \"chatdata.csv\") } # }"},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Write chat data to json file — write_to_json","title":"Write chat data to json file — write_to_json","text":"Write chat data json file","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write chat data to json file — write_to_json","text":"","code":"write_to_json(chatdata, output_file)"},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write chat data to json file — write_to_json","text":"chatdata Chat data parse_users_chat_data. output_file Output file name. Must end '.json'.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write chat data to json file — write_to_json","text":"TRUE successful.","code":""},{"path":"https://hauselin.github.io/chatlogr/reference/write_to_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write chat data to json file — write_to_json","text":"","code":"if (FALSE) { # \\dontrun{ write_to_json(chatdata, \"chatdata.json\") } # }"}]
